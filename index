<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Any</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #fff9e6; /* Light yellow background */
        }
        .container {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 400px;
            opacity: 0;
            animation: fadeIn 1s ease-in forwards;
        }
        @keyframes fadeIn {
            to { opacity: 1; }
        }
        h2 {
            text-align: center;
            color: #333;
            transition: color 0.3s;
        }
        h2:hover {
            color: #007bff;
        }
        .form-group {
            margin-bottom: 15px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            color: #555;
            transition: color 0.3s;
        }
        label:hover {
            color: #007bff;
        }
        input, select {
            width: 100%;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        input:focus, select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
        }
        .invalid {
            border-color: #dc3545 !important;
        }
        .select2-container--default .select2-selection--single {
            border: 1px solid #ddd;
            border-radius: 4px;
            height: 34px;
            padding: 4px;
        }
        .select2-container--default .select2-selection--single .select2-selection__rendered {
            line-height: 24px;
        }
        .select2-container--default .select2-selection--single .select2-selection__arrow {
            height: 34px;
        }
        button {
            width: 100%;
            padding: 10px;
            background: #007bff;
            border: none;
            border-radius: 4px;
            color: white;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s, transform 0.2s;
        }
        button:hover {
            background: #0056b3;
            transform: scale(1.02);
        }
        button:active {
            transform: scale(0.98);
        }
        .message {
            margin-top: 10px;
            text-align: center;
            color: #333;
            display: none;
            font-size: 14px;
        }
        .error {
            color: #dc3545;
        }
        .success {
            color: #28a745;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>Any</h2>
        <form id="userForm">
            <div class="form-group">
                <label for="email">Email ID</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="form-group">
                <label for="dbName">Database Name</label>
                <select id="dbName" name="dbName" required>
                    <option value="">Select a database</option>
                </select>
            </div>
            <div class="form-group hidden" id="schemaGroup">
                <label for="schemaName">Schema Name</label>
                <select id="schemaName" name="schemaName" required>
                    <option value="">Select a schema</option>
                </select>
            </div>
            <div class="form-group hidden" id="tableGroup">
                <label for="tableName">Table Name</label>
                <select id="tableName" name="tableName" required>
                    <option value="">Select a table</option>
                </select>
            </div>
            <button type="submit">Submit</button>
        </form>
        <div class="message" id="message"></div>
    </div>

    <script>
        $(document).ready(function() {
            // Initialize Select2 for searchable dropdowns
            $('#dbName, #schemaName, #tableName').select2({
                width: '100%',
                placeholder: 'Type to search...',
                allowClear: true
            });

            // Fetch database names on page load
            $.ajax({
                url: '/databases',
                type: 'GET',
                success: function(response) {
                    const dbSelect = $('#dbName');
                    dbSelect.empty().append('<option value="">Select a database</option>');
                    response.databases.forEach(function(db) {
                        dbSelect.append(`<option value="${db}">${db}</option>`);
                    });
                    dbSelect.trigger('change'); // Refresh Select2
                },
                error: function() {
                    showMessage('Error fetching databases.', 'error');
                }
            });

            // Fetch schema names when a database is selected
            $('#dbName').on('change', function() {
                const dbName = $(this).val();
                const schemaGroup = $('#schemaGroup');
                const schemaSelect = $('#schemaName');
                const tableGroup = $('#tableGroup');
                schemaSelect.empty().append('<option value="">Select a schema</option>');
                tableGroup.addClass('hidden'); // Hide table dropdown

                if (dbName) {
                    $.ajax({
                        url: `/schemas/${dbName}`,
                        type: 'GET',
                        success: function(response) {
                            response.schemas.forEach(function(schema) {
                                schemaSelect.append(`<option value="${schema}">${schema}</option>`);
                            });
                            schemaSelect.trigger('change'); // Refresh Select2
                            schemaGroup.removeClass('hidden'); // Show schema dropdown
                        },
                        error: function() {
                            showMessage('Error fetching schemas.', 'error');
                            schemaGroup.addClass('hidden'); // Hide schema dropdown
                        }
                    });
                } else {
                    schemaGroup.addClass('hidden'); // Hide schema dropdown
                }
            });

            // Fetch table names when a schema is selected
            $('#schemaName').on('change', function() {
                const dbName = $('#dbName').val();
                const schemaName = $(this).val();
                const tableGroup = $('#tableGroup');
                const tableSelect = $('#tableName');
                tableSelect.empty().append('<option value="">Select a table</option>');

                if (dbName && schemaName) {
                    $.ajax({
                        url: `/tables/${dbName}/${schemaName}`,
                        type: 'GET',
                        success: function(response) {
                            response.tables.forEach(function(table) {
                                tableSelect.append(`<option value="${table}">${table}</option>`);
                            });
                            tableSelect.trigger('change'); // Refresh Select2
                            tableGroup.removeClass('hidden'); // Show table dropdown
                        },
                        error: function() {
                            showMessage('Error fetching tables.', 'error');
                            tableGroup.addClass('hidden'); // Hide table dropdown
                        }
                    });
                } else {
                    tableGroup.addClass('hidden'); // Hide table dropdown
                }
            });

            // Handle form submission with validation
            $('#userForm').on('submit', function(e) {
                e.preventDefault();
                
                // Get form data
                const email = $('#email').val();
                const dbName = $('#dbName').val();
                const schemaName = $('#schemaName').val();
                const tableName = $('#tableName').val();

                // Reset previous validation styles
                $('#email, #dbName, #schemaName, #tableName').removeClass('invalid');
                let errors = [];

                // Validate email
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!email || !emailRegex.test(email)) {
                    $('#email').addClass('invalid');
                    errors.push('Please enter a valid email address.');
                }

                // Validate database name
                if (!dbName) {
                    $('#dbName').addClass('invalid');
                    errors.push('Please select a valid database.');
                }

                // Validate schema name (only if schema dropdown is visible)
                if ($('#schemaGroup').is(':visible') && !schemaName) {
                    $('#schemaName').addClass('invalid');
                    errors.push('Please select a valid schema.');
                }

                // Validate table name (only if table dropdown is visible)
                if ($('#tableGroup').is(':visible') && !tableName) {
                    $('#tableName').addClass('invalid');
                    errors.push('Please select a valid table.');
                }

                // Show errors if any
                if (errors.length > 0) {
                    showMessage(errors.join(' '), 'error');
                    return;
                }

                // Submit form data to Flask
                const formData = { email, dbName, schemaName, tableName };
                $.ajax({
                    url: '/submit',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(formData),
                    success: function(response) {
                        showMessage('Your request has been submitted to the backend. You will receive the data through email.', 'success');
                        $('#userForm')[0].reset();
                        $('#dbName').val('').trigger('change'); // Reset Select2
                        $('#schemaGroup').addClass('hidden'); // Hide schema dropdown
                        $('#tableGroup').addClass('hidden'); // Hide table dropdown
                    },
                    error: function(xhr, status, error) {
                        showMessage('Error submitting form. Please try again.', 'error');
                    }
                });
            });

            function showMessage(text, type) {
                const messageDiv = $('#message');
                messageDiv.text(text)
                    .removeClass('success error')
                    .addClass(type)
                    .slideDown()
                    .delay(5000)
                    .slideUp();
            }
        });
    </script>
</body>
</html>



------------
from flask import Flask, jsonify, request
import pymssql
import os

app = Flask(__name__)

# SQL Server connection configuration
SQL_SERVER = 'your_server'  # e.g., 'localhost' or 'server_name\\instance'
SQL_USER = 'your_username'  # e.g., 'sa'
SQL_PASSWORD = 'your_password'
METADATA_DB = 'MetadataDB'  # Database containing TableMetadata
METADATA_TABLE = 'TableMetadata'  # Table with db_name, schema_name, table_name, owner_name

def get_db_connection(database=METADATA_DB):
    try:
        conn = pymssql.connect(
            server=SQL_SERVER,
            user=SQL_USER,
            password=SQL_PASSWORD,
            database=database,
            as_dict=True
        )
        return conn
    except pymssql.OperationalError as e:
        print(f"Connection error: {e}")
        return None

@app.route('/')
def index():
    return app.send_static_file('index.html')

@app.route('/databases', methods=['GET'])
def get_databases():
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'Database connection failed'}), 500
    
    try:
        cursor = conn.cursor()
        cursor.execute(f"SELECT DISTINCT db_name FROM {METADATA_TABLE} ORDER BY db_name")
        databases = [row['db_name'] for row in cursor.fetchall()]
        cursor.close()
        conn.close()
        return jsonify({'databases': databases})
    except Exception as e:
        print(f"Error fetching databases: {e}")
        return jsonify({'error': 'Error fetching databases'}), 500

@app.route('/schemas/<db_name>', methods=['GET'])
def get_schemas(db_name):
    # Validate db_name to prevent SQL injection
    if not db_name.isalnum():
        return jsonify({'error': 'Invalid database name'}), 400
    
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'Database connection failed'}), 500
    
    try:
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT DISTINCT schema_name FROM {METADATA_TABLE} WHERE db_name = %s ORDER BY schema_name",
            (db_name,)
        )
        schemas = [row['schema_name'] for row in cursor.fetchall()]
        cursor.close()
        conn.close()
        return jsonify({'schemas': schemas})
    except Exception as e:
        print(f"Error fetching schemas: {e}")
        return jsonify({'error': 'Error fetching schemas'}), 500

@app.route('/tables/<db_name>/<schema_name>', methods=['GET'])
def get_tables(db_name, schema_name):
    # Validate inputs to prevent SQL injection
    if not (db_name.isalnum() and schema_name.isalnum()):
        return jsonify({'error': 'Invalid database or schema name'}), 400
    
    conn = get_db_connection()
    if not conn:
        return jsonify({'error': 'Database connection failed'}), 500
    
    try:
        cursor = conn.cursor()
        cursor.execute(
            f"SELECT table_name FROM {METADATA_TABLE} WHERE db_name = %s AND schema_name = %s ORDER BY table_name",
            (db_name, schema_name)
        )
        tables = [row['table_name'] for row in cursor.fetchall()]
        cursor.close()
        conn.close()
        return jsonify({'tables': tables})
    except Exception as e:
        print(f"Error fetching tables: {e}")
        return jsonify({'error': 'Error fetching tables'}), 500

@app.route('/submit', methods=['POST'])
def submit_form():
    data = request.get_json()
    email = data.get('email')
    db_name = data.get('dbName')
    schema_name = data.get('schemaName')
    table_name = data.get('tableName')

    # Basic validation
    if not all([email, db_name, schema_name, table_name]):
        return jsonify({'error': 'Missing required fields'}), 400

    # Placeholder for backend processing (e.g., sending email or processing data)
    print(f"Received: Email={email}, DB={db_name}, Schema={schema_name}, Table={table_name}")
    
    # TODO: Implement actual backend logic (e.g., query table, send email)
    return jsonify({'message': 'Form submitted successfully'})

if __name__ == '__main__':
    # Ensure static folder exists for serving index.html
    os.makedirs('static', exist_ok=True)
    app.run(debug=True, host='0.0.0.0', port=5000)
